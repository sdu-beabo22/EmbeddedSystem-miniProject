// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="converter_converter,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.556000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=111,HLS_VERSION=2020_2}" *)

module converter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_address0,
        din_ce0,
        din_q0,
        dout_address0,
        dout_ce0,
        dout_we0,
        dout_d0,
        dout_address1,
        dout_ce1,
        dout_we1,
        dout_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] din_address0;
output   din_ce0;
input  [31:0] din_q0;
output  [10:0] dout_address0;
output   dout_ce0;
output   dout_we0;
output  [31:0] dout_d0;
output  [10:0] dout_address1;
output   dout_ce1;
output   dout_we1;
output  [31:0] dout_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg din_ce0;
reg dout_ce0;
reg dout_we0;
reg dout_ce1;
reg dout_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln14_fu_107_p2;
reg   [0:0] icmp_ln14_reg_157;
wire   [0:0] icmp_ln14_1_fu_113_p2;
reg   [0:0] icmp_ln14_1_reg_162;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_83_p0;
wire   [7:0] tmp_fu_93_p4;
wire   [22:0] trunc_ln14_fu_103_p1;
wire   [0:0] or_ln14_fu_119_p2;
wire   [0:0] grp_fu_83_p2;
wire   [0:0] and_ln14_fu_123_p2;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

converter_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_83_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_83_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln14_1_reg_162 <= icmp_ln14_1_fu_113_p2;
        icmp_ln14_reg_157 <= icmp_ln14_fu_107_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        din_ce0 = 1'b1;
    end else begin
        din_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dout_ce0 = 1'b1;
    end else begin
        dout_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dout_ce1 = 1'b1;
    end else begin
        dout_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dout_we0 = 1'b1;
    end else begin
        dout_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dout_we1 = 1'b1;
    end else begin
        dout_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln14_fu_123_p2 = (or_ln14_fu_119_p2 & grp_fu_83_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign din_address0 = 64'd0;

assign dout_address0 = 64'd1;

assign dout_address1 = 64'd0;

assign dout_d0 = ((and_ln14_fu_123_p2[0:0] == 1'b1) ? 32'd1094713344 : 32'd1084227584);

assign dout_d1 = ((and_ln14_fu_123_p2[0:0] == 1'b1) ? 32'd0 : 32'd3235905536);

assign grp_fu_83_p0 = din_q0;

assign icmp_ln14_1_fu_113_p2 = ((trunc_ln14_fu_103_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_107_p2 = ((tmp_fu_93_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln14_fu_119_p2 = (icmp_ln14_reg_157 | icmp_ln14_1_reg_162);

assign tmp_fu_93_p4 = {{din_q0[30:23]}};

assign trunc_ln14_fu_103_p1 = din_q0[22:0];

endmodule //converter
