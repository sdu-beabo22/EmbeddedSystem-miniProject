// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="inversekinematics_inversekinematics,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.316800,HLS_SYN_LAT=194,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=0,HLS_SYN_FF=14100,HLS_SYN_LUT=27525,HLS_VERSION=2020_2}" *)

module inversekinematics (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_address0,
        din_ce0,
        din_q0,
        dout_address0,
        dout_ce0,
        dout_we0,
        dout_d0
);

parameter    ap_ST_fsm_state1 = 139'd1;
parameter    ap_ST_fsm_pp0_stage0 = 139'd2;
parameter    ap_ST_fsm_state4 = 139'd4;
parameter    ap_ST_fsm_state5 = 139'd8;
parameter    ap_ST_fsm_state6 = 139'd16;
parameter    ap_ST_fsm_state7 = 139'd32;
parameter    ap_ST_fsm_state8 = 139'd64;
parameter    ap_ST_fsm_state9 = 139'd128;
parameter    ap_ST_fsm_state10 = 139'd256;
parameter    ap_ST_fsm_state11 = 139'd512;
parameter    ap_ST_fsm_state12 = 139'd1024;
parameter    ap_ST_fsm_state13 = 139'd2048;
parameter    ap_ST_fsm_state14 = 139'd4096;
parameter    ap_ST_fsm_state15 = 139'd8192;
parameter    ap_ST_fsm_state16 = 139'd16384;
parameter    ap_ST_fsm_state17 = 139'd32768;
parameter    ap_ST_fsm_state18 = 139'd65536;
parameter    ap_ST_fsm_state19 = 139'd131072;
parameter    ap_ST_fsm_state20 = 139'd262144;
parameter    ap_ST_fsm_state21 = 139'd524288;
parameter    ap_ST_fsm_state22 = 139'd1048576;
parameter    ap_ST_fsm_state23 = 139'd2097152;
parameter    ap_ST_fsm_state24 = 139'd4194304;
parameter    ap_ST_fsm_state25 = 139'd8388608;
parameter    ap_ST_fsm_state26 = 139'd16777216;
parameter    ap_ST_fsm_state27 = 139'd33554432;
parameter    ap_ST_fsm_state28 = 139'd67108864;
parameter    ap_ST_fsm_state29 = 139'd134217728;
parameter    ap_ST_fsm_state30 = 139'd268435456;
parameter    ap_ST_fsm_state31 = 139'd536870912;
parameter    ap_ST_fsm_state32 = 139'd1073741824;
parameter    ap_ST_fsm_state33 = 139'd2147483648;
parameter    ap_ST_fsm_state34 = 139'd4294967296;
parameter    ap_ST_fsm_state35 = 139'd8589934592;
parameter    ap_ST_fsm_state36 = 139'd17179869184;
parameter    ap_ST_fsm_state37 = 139'd34359738368;
parameter    ap_ST_fsm_state38 = 139'd68719476736;
parameter    ap_ST_fsm_state39 = 139'd137438953472;
parameter    ap_ST_fsm_state40 = 139'd274877906944;
parameter    ap_ST_fsm_state41 = 139'd549755813888;
parameter    ap_ST_fsm_state42 = 139'd1099511627776;
parameter    ap_ST_fsm_state43 = 139'd2199023255552;
parameter    ap_ST_fsm_state44 = 139'd4398046511104;
parameter    ap_ST_fsm_state45 = 139'd8796093022208;
parameter    ap_ST_fsm_state46 = 139'd17592186044416;
parameter    ap_ST_fsm_state47 = 139'd35184372088832;
parameter    ap_ST_fsm_state48 = 139'd70368744177664;
parameter    ap_ST_fsm_state49 = 139'd140737488355328;
parameter    ap_ST_fsm_state50 = 139'd281474976710656;
parameter    ap_ST_fsm_state51 = 139'd562949953421312;
parameter    ap_ST_fsm_state52 = 139'd1125899906842624;
parameter    ap_ST_fsm_state53 = 139'd2251799813685248;
parameter    ap_ST_fsm_state54 = 139'd4503599627370496;
parameter    ap_ST_fsm_state55 = 139'd9007199254740992;
parameter    ap_ST_fsm_state56 = 139'd18014398509481984;
parameter    ap_ST_fsm_state57 = 139'd36028797018963968;
parameter    ap_ST_fsm_state58 = 139'd72057594037927936;
parameter    ap_ST_fsm_state59 = 139'd144115188075855872;
parameter    ap_ST_fsm_state60 = 139'd288230376151711744;
parameter    ap_ST_fsm_state61 = 139'd576460752303423488;
parameter    ap_ST_fsm_state62 = 139'd1152921504606846976;
parameter    ap_ST_fsm_state63 = 139'd2305843009213693952;
parameter    ap_ST_fsm_state64 = 139'd4611686018427387904;
parameter    ap_ST_fsm_state65 = 139'd9223372036854775808;
parameter    ap_ST_fsm_state66 = 139'd18446744073709551616;
parameter    ap_ST_fsm_state67 = 139'd36893488147419103232;
parameter    ap_ST_fsm_state68 = 139'd73786976294838206464;
parameter    ap_ST_fsm_state69 = 139'd147573952589676412928;
parameter    ap_ST_fsm_state70 = 139'd295147905179352825856;
parameter    ap_ST_fsm_state71 = 139'd590295810358705651712;
parameter    ap_ST_fsm_state72 = 139'd1180591620717411303424;
parameter    ap_ST_fsm_state73 = 139'd2361183241434822606848;
parameter    ap_ST_fsm_state74 = 139'd4722366482869645213696;
parameter    ap_ST_fsm_state75 = 139'd9444732965739290427392;
parameter    ap_ST_fsm_state76 = 139'd18889465931478580854784;
parameter    ap_ST_fsm_state77 = 139'd37778931862957161709568;
parameter    ap_ST_fsm_state78 = 139'd75557863725914323419136;
parameter    ap_ST_fsm_state79 = 139'd151115727451828646838272;
parameter    ap_ST_fsm_state80 = 139'd302231454903657293676544;
parameter    ap_ST_fsm_state81 = 139'd604462909807314587353088;
parameter    ap_ST_fsm_state82 = 139'd1208925819614629174706176;
parameter    ap_ST_fsm_state83 = 139'd2417851639229258349412352;
parameter    ap_ST_fsm_state84 = 139'd4835703278458516698824704;
parameter    ap_ST_fsm_state85 = 139'd9671406556917033397649408;
parameter    ap_ST_fsm_state86 = 139'd19342813113834066795298816;
parameter    ap_ST_fsm_state87 = 139'd38685626227668133590597632;
parameter    ap_ST_fsm_state88 = 139'd77371252455336267181195264;
parameter    ap_ST_fsm_state89 = 139'd154742504910672534362390528;
parameter    ap_ST_fsm_state90 = 139'd309485009821345068724781056;
parameter    ap_ST_fsm_state91 = 139'd618970019642690137449562112;
parameter    ap_ST_fsm_state92 = 139'd1237940039285380274899124224;
parameter    ap_ST_fsm_state93 = 139'd2475880078570760549798248448;
parameter    ap_ST_fsm_state94 = 139'd4951760157141521099596496896;
parameter    ap_ST_fsm_state95 = 139'd9903520314283042199192993792;
parameter    ap_ST_fsm_state96 = 139'd19807040628566084398385987584;
parameter    ap_ST_fsm_state97 = 139'd39614081257132168796771975168;
parameter    ap_ST_fsm_state98 = 139'd79228162514264337593543950336;
parameter    ap_ST_fsm_state99 = 139'd158456325028528675187087900672;
parameter    ap_ST_fsm_state100 = 139'd316912650057057350374175801344;
parameter    ap_ST_fsm_state101 = 139'd633825300114114700748351602688;
parameter    ap_ST_fsm_state102 = 139'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state103 = 139'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state104 = 139'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state105 = 139'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state106 = 139'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state107 = 139'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state108 = 139'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state109 = 139'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state110 = 139'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state111 = 139'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state112 = 139'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state113 = 139'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state114 = 139'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state115 = 139'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state116 = 139'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state117 = 139'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state118 = 139'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state119 = 139'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state120 = 139'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state121 = 139'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state122 = 139'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state123 = 139'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state124 = 139'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state125 = 139'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state126 = 139'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state127 = 139'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state128 = 139'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state129 = 139'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state130 = 139'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state131 = 139'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state132 = 139'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state133 = 139'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state134 = 139'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state135 = 139'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state136 = 139'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state137 = 139'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state138 = 139'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state139 = 139'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state140 = 139'd348449143727040986586495598010130648530944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] din_address0;
output   din_ce0;
input  [31:0] din_q0;
output  [10:0] dout_address0;
output   dout_ce0;
output   dout_we0;
output  [31:0] dout_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg din_ce0;
reg[10:0] dout_address0;
reg dout_ce0;
reg dout_we0;
reg[31:0] dout_d0;

(* fsm_encoding = "none" *) reg   [138:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] y_reg_134;
reg   [31:0] x_reg_146;
reg   [1:0] i_reg_158;
wire   [63:0] grp_pow_generic_double_s_fu_169_ap_return;
reg   [63:0] reg_299;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state89;
wire   [63:0] grp_fu_272_p2;
reg   [63:0] reg_306;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state128;
wire   [31:0] grp_fu_257_p1;
reg   [31:0] reg_313;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state130;
wire   [63:0] grp_fu_289_p2;
reg   [63:0] reg_320;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state121;
wire   [63:0] grp_generic_asin_double_s_fu_235_ap_return;
reg   [63:0] reg_325;
wire    ap_CS_fsm_state118;
wire    grp_generic_asin_double_s_fu_235_ap_ready;
wire    grp_generic_asin_double_s_fu_235_ap_done;
wire    grp_atan2_cordic_double_s_fu_227_ap_ready;
wire    grp_atan2_cordic_double_s_fu_227_ap_done;
reg    ap_block_state118_on_subcall_done;
wire   [31:0] grp_fu_242_p2;
reg   [31:0] reg_330;
wire    ap_CS_fsm_state139;
wire   [1:0] add_ln15_fu_335_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln15_fu_341_p2;
reg   [0:0] icmp_ln15_reg_389;
wire   [0:0] trunc_ln16_fu_352_p1;
reg   [0:0] trunc_ln16_reg_398;
wire   [31:0] y_1_fu_360_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] din_1_1_fu_367_p3;
wire   [63:0] grp_fu_261_p1;
reg   [63:0] x_assign_reg_414;
wire    ap_CS_fsm_state5;
wire   [63:0] grp_fu_266_p1;
reg   [63:0] x_assign_5_reg_420;
wire   [63:0] grp_pow_generic_double_s_fu_198_ap_return;
reg   [63:0] tmp_s_reg_426;
wire   [63:0] grp_fu_294_p2;
reg   [63:0] tmp_8_reg_431;
wire    ap_CS_fsm_state63;
reg   [63:0] x_assign_2_reg_436;
wire    ap_CS_fsm_state66;
wire   [63:0] grp_fu_284_p2;
reg   [63:0] mul_reg_442;
wire   [63:0] grp_fu_277_p2;
reg   [63:0] sub2_reg_447;
reg   [63:0] sub3_reg_452;
wire    ap_CS_fsm_state99;
wire   [63:0] grp_atan2_cordic_double_s_fu_227_ap_return;
reg   [31:0] phi_1_reg_462;
wire    ap_CS_fsm_state125;
wire   [31:0] grp_fu_252_p2;
reg   [31:0] mul2_reg_467;
wire    ap_CS_fsm_state134;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    grp_pow_generic_double_s_fu_169_ap_start;
wire    grp_pow_generic_double_s_fu_169_ap_done;
wire    grp_pow_generic_double_s_fu_169_ap_idle;
wire    grp_pow_generic_double_s_fu_169_ap_ready;
wire    grp_pow_generic_double_s_fu_198_ap_start;
wire    grp_pow_generic_double_s_fu_198_ap_done;
wire    grp_pow_generic_double_s_fu_198_ap_idle;
wire    grp_pow_generic_double_s_fu_198_ap_ready;
wire    grp_atan2_cordic_double_s_fu_227_ap_start;
wire    grp_atan2_cordic_double_s_fu_227_ap_idle;
wire   [63:0] grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_din0;
wire   [63:0] grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_din1;
wire   [1:0] grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_opcode;
wire   [63:0] grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_dout0;
wire    grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_ce;
wire    grp_generic_asin_double_s_fu_235_ap_start;
wire    grp_generic_asin_double_s_fu_235_ap_idle;
wire    ap_block_pp0_stage0;
reg    grp_pow_generic_double_s_fu_169_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [138:0] ap_NS_fsm;
wire    ap_NS_fsm_state5;
wire    ap_NS_fsm_state66;
reg    grp_pow_generic_double_s_fu_198_ap_start_reg;
reg    grp_atan2_cordic_double_s_fu_227_ap_start_reg;
wire    ap_CS_fsm_state117;
reg    grp_generic_asin_double_s_fu_235_ap_start_reg;
wire    ap_CS_fsm_state122;
wire   [63:0] i_cast_fu_347_p1;
wire    ap_CS_fsm_state140;
wire   [31:0] bitcast_ln35_fu_374_p1;
wire   [31:0] bitcast_ln36_fu_379_p1;
reg   [31:0] grp_fu_242_p0;
reg   [31:0] grp_fu_242_p1;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state131;
reg   [63:0] grp_fu_257_p0;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state129;
reg   [31:0] grp_fu_261_p0;
reg   [63:0] grp_fu_272_p0;
reg   [63:0] grp_fu_272_p1;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state95;
reg   [63:0] grp_fu_289_p0;
reg   [63:0] grp_fu_289_p1;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state34;
wire   [31:0] din_0_fu_356_p1;
wire   [31:0] grp_fu_247_p2;
reg    grp_fu_257_ce;
reg   [1:0] grp_fu_272_opcode;
reg    grp_fu_272_ce;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state127;
reg    grp_fu_289_ce;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state115;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 139'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_pow_generic_double_s_fu_169_ap_start_reg = 1'b0;
#0 grp_pow_generic_double_s_fu_198_ap_start_reg = 1'b0;
#0 grp_atan2_cordic_double_s_fu_227_ap_start_reg = 1'b0;
#0 grp_generic_asin_double_s_fu_235_ap_start_reg = 1'b0;
end

inversekinematics_pow_generic_double_s grp_pow_generic_double_s_fu_169(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_169_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_169_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_169_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_169_ap_ready),
    .ap_ce(1'b1),
    .base_r(grp_fu_261_p1),
    .ap_return(grp_pow_generic_double_s_fu_169_ap_return)
);

inversekinematics_pow_generic_double_s grp_pow_generic_double_s_fu_198(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_198_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_198_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_198_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_198_ap_ready),
    .ap_ce(1'b1),
    .base_r(grp_fu_266_p1),
    .ap_return(grp_pow_generic_double_s_fu_198_ap_return)
);

inversekinematics_atan2_cordic_double_s grp_atan2_cordic_double_s_fu_227(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_atan2_cordic_double_s_fu_227_ap_start),
    .ap_done(grp_atan2_cordic_double_s_fu_227_ap_done),
    .ap_idle(grp_atan2_cordic_double_s_fu_227_ap_idle),
    .ap_ready(grp_atan2_cordic_double_s_fu_227_ap_ready),
    .y_in(x_assign_5_reg_420),
    .x_in(x_assign_reg_414),
    .ap_return(grp_atan2_cordic_double_s_fu_227_ap_return),
    .grp_fu_272_p_din0(grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_din0),
    .grp_fu_272_p_din1(grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_din1),
    .grp_fu_272_p_opcode(grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_opcode),
    .grp_fu_272_p_dout0(grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_dout0),
    .grp_fu_272_p_ce(grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_ce)
);

inversekinematics_generic_asin_double_s grp_generic_asin_double_s_fu_235(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_generic_asin_double_s_fu_235_ap_start),
    .ap_done(grp_generic_asin_double_s_fu_235_ap_done),
    .ap_idle(grp_generic_asin_double_s_fu_235_ap_idle),
    .ap_ready(grp_generic_asin_double_s_fu_235_ap_ready),
    .in_r(reg_320),
    .ap_return(grp_generic_asin_double_s_fu_235_ap_return)
);

inversekinematics_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_242_p0),
    .din1(grp_fu_242_p1),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

inversekinematics_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_330),
    .din1(32'd1113927405),
    .ce(1'b1),
    .dout(grp_fu_247_p2)
);

inversekinematics_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_313),
    .din1(32'd1113927405),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

inversekinematics_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_257_p0),
    .ce(grp_fu_257_ce),
    .dout(grp_fu_257_p1)
);

inversekinematics_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_261_p0),
    .ce(1'b1),
    .dout(grp_fu_261_p1)
);

inversekinematics_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_reg_134),
    .ce(1'b1),
    .dout(grp_fu_266_p1)
);

inversekinematics_dadddsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_5_full_dsp_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_272_p0),
    .din1(grp_fu_272_p1),
    .opcode(grp_fu_272_opcode),
    .ce(grp_fu_272_ce),
    .dout(grp_fu_272_p2)
);

inversekinematics_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_299),
    .din1(64'd13851102128954671104),
    .ce(1'b1),
    .dout(grp_fu_277_p2)
);

inversekinematics_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_assign_2_reg_436),
    .din1(64'd13845191154443747328),
    .ce(1'b1),
    .dout(grp_fu_284_p2)
);

inversekinematics_ddiv_64ns_64ns_64_22_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_22_no_dsp_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_289_p0),
    .din1(grp_fu_289_p1),
    .ce(grp_fu_289_ce),
    .dout(grp_fu_289_p2)
);

inversekinematics_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_306),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_atan2_cordic_double_s_fu_227_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state117)) begin
            grp_atan2_cordic_double_s_fu_227_ap_start_reg <= 1'b1;
        end else if ((grp_atan2_cordic_double_s_fu_227_ap_ready == 1'b1)) begin
            grp_atan2_cordic_double_s_fu_227_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_generic_asin_double_s_fu_235_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state117))) begin
            grp_generic_asin_double_s_fu_235_ap_start_reg <= 1'b1;
        end else if ((grp_generic_asin_double_s_fu_235_ap_ready == 1'b1)) begin
            grp_generic_asin_double_s_fu_235_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_169_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state66) & (1'b1 == ap_CS_fsm_state65)) | ((1'b1 == ap_NS_fsm_state5) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_pow_generic_double_s_fu_169_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_169_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_169_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_198_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state5) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_pow_generic_double_s_fu_198_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_198_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_198_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_341_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_158 <= add_ln15_fu_335_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_158 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln15_reg_389 <= icmp_ln15_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        mul2_reg_467 <= grp_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        mul_reg_442 <= grp_fu_284_p2;
        sub2_reg_447 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        phi_1_reg_462 <= grp_fu_257_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_299 <= grp_pow_generic_double_s_fu_169_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_306 <= grp_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state65))) begin
        reg_313 <= grp_fu_257_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state116))) begin
        reg_320 <= grp_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_generic_asin_double_s_fu_235_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state123)) | ((1'b0 == ap_block_state118_on_subcall_done) & (1'b1 == ap_CS_fsm_state118)))) begin
        reg_325 <= grp_generic_asin_double_s_fu_235_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state130))) begin
        reg_330 <= grp_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        sub3_reg_452 <= grp_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        tmp_8_reg_431 <= grp_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_s_reg_426 <= grp_pow_generic_double_s_fu_198_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_341_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln16_reg_398 <= trunc_ln16_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        x_assign_2_reg_436 <= grp_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_assign_5_reg_420 <= grp_fu_266_p1;
        x_assign_reg_414 <= grp_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln15_reg_389 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_146 <= din_1_1_fu_367_p3;
        y_reg_134 <= y_1_fu_360_p3;
    end
end

always @ (*) begin
    if ((icmp_ln15_fu_341_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        din_ce0 = 1'b1;
    end else begin
        din_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        dout_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dout_address0 = 64'd0;
    end else begin
        dout_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state134))) begin
        dout_ce0 = 1'b1;
    end else begin
        dout_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        dout_d0 = bitcast_ln36_fu_379_p1;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dout_d0 = bitcast_ln35_fu_374_p1;
    end else begin
        dout_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state134))) begin
        dout_we0 = 1'b1;
    end else begin
        dout_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state135)) begin
        grp_fu_242_p0 = 32'd1127481344;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        grp_fu_242_p0 = reg_313;
    end else begin
        grp_fu_242_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state135)) begin
        grp_fu_242_p1 = mul2_reg_467;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        grp_fu_242_p1 = phi_1_reg_462;
    end else begin
        grp_fu_242_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state65) | ((1'b0 == ap_block_state118_on_subcall_done) & (1'b1 == ap_CS_fsm_state118)))) begin
        grp_fu_257_ce = 1'b1;
    end else begin
        grp_fu_257_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state124))) begin
        grp_fu_257_p0 = reg_306;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        grp_fu_257_p0 = grp_atan2_cordic_double_s_fu_227_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_257_p0 = tmp_8_reg_431;
    end else begin
        grp_fu_257_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_261_p0 = grp_fu_257_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_261_p0 = x_reg_146;
    end else begin
        grp_fu_261_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state118))) begin
        grp_fu_272_ce = grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_ce;
    end else if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state33) | ((grp_generic_asin_double_s_fu_235_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state123)))) begin
        grp_fu_272_ce = 1'b1;
    end else begin
        grp_fu_272_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state118))) begin
        grp_fu_272_opcode = grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_opcode;
    end else if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state119))) begin
        grp_fu_272_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_272_opcode = 2'd0;
    end else begin
        grp_fu_272_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state118))) begin
        grp_fu_272_p0 = grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_din0;
    end else if (((1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state119))) begin
        grp_fu_272_p0 = 64'd4609753056924675352;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_272_p0 = sub2_reg_447;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_272_p0 = 64'd4627448617123184640;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_272_p0 = reg_299;
    end else begin
        grp_fu_272_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state118))) begin
        grp_fu_272_p1 = grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_din1;
    end else if (((1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state119))) begin
        grp_fu_272_p1 = reg_325;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_272_p1 = 64'd13855464991093686272;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_272_p1 = reg_299;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_272_p1 = tmp_s_reg_426;
    end else begin
        grp_fu_272_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | ((1'b0 == ap_block_state118_on_subcall_done) & (1'b1 == ap_CS_fsm_state118)))) begin
        grp_fu_289_ce = 1'b1;
    end else begin
        grp_fu_289_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_fu_289_p0 = sub3_reg_452;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_289_p0 = reg_306;
    end else begin
        grp_fu_289_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_fu_289_p1 = 64'd13857998265884082176;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_289_p1 = mul_reg_442;
    end else begin
        grp_fu_289_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln15_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln15_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            if (((1'b0 == ap_block_state118_on_subcall_done) & (1'b1 == ap_CS_fsm_state118))) begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            if (((grp_generic_asin_double_s_fu_235_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state123))) begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_335_p2 = (i_reg_158 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd97];

assign ap_NS_fsm_state5 = ap_NS_fsm[32'd3];

assign ap_NS_fsm_state66 = ap_NS_fsm[32'd64];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state118_on_subcall_done = ((grp_atan2_cordic_double_s_fu_227_ap_done == 1'b0) | (grp_generic_asin_double_s_fu_235_ap_done == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln35_fu_374_p1 = grp_fu_247_p2;

assign bitcast_ln36_fu_379_p1 = reg_330;

assign din_0_fu_356_p1 = din_q0;

assign din_1_1_fu_367_p3 = ((trunc_ln16_reg_398[0:0] == 1'b1) ? x_reg_146 : din_0_fu_356_p1);

assign din_address0 = i_cast_fu_347_p1;

assign grp_atan2_cordic_double_s_fu_227_ap_start = grp_atan2_cordic_double_s_fu_227_ap_start_reg;

assign grp_atan2_cordic_double_s_fu_227_grp_fu_272_p_dout0 = grp_fu_272_p2;

assign grp_generic_asin_double_s_fu_235_ap_start = grp_generic_asin_double_s_fu_235_ap_start_reg;

assign grp_pow_generic_double_s_fu_169_ap_start = grp_pow_generic_double_s_fu_169_ap_start_reg;

assign grp_pow_generic_double_s_fu_198_ap_start = grp_pow_generic_double_s_fu_198_ap_start_reg;

assign i_cast_fu_347_p1 = i_reg_158;

assign icmp_ln15_fu_341_p2 = ((i_reg_158 == 2'd2) ? 1'b1 : 1'b0);

assign trunc_ln16_fu_352_p1 = i_reg_158[0:0];

assign y_1_fu_360_p3 = ((trunc_ln16_reg_398[0:0] == 1'b1) ? din_0_fu_356_p1 : y_reg_134);

endmodule //inversekinematics
