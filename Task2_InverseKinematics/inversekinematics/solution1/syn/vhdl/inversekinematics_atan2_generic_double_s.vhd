-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inversekinematics_atan2_generic_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_in : IN STD_LOGIC_VECTOR (63 downto 0);
    x_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of inversekinematics_atan2_generic_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv86_0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_1B : STD_LOGIC_VECTOR (11 downto 0) := "000000011011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_58 : STD_LOGIC_VECTOR (6 downto 0) := "1011000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv42_3FFFFFFFFFF : STD_LOGIC_VECTOR (41 downto 0) := "111111111111111111111111111111111111111111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv86_3FFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (85 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv86_1 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_ctab_table_128_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cordic_ctab_table_128_V_ce0 : STD_LOGIC;
    signal cordic_ctab_table_128_V_q0 : STD_LOGIC_VECTOR (125 downto 0);
    signal k_reg_161 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_21_reg_172 : STD_LOGIC_VECTOR (88 downto 0);
    signal x_V_1_reg_181 : STD_LOGIC_VECTOR (88 downto 0);
    signal z_V_reg_190 : STD_LOGIC_VECTOR (85 downto 0);
    signal icmp_ln832_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln832_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln710_fu_298_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_53_fu_362_p3 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln167_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln167_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_874 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_fu_387_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_2_fu_417_p3 : STD_LOGIC_VECTOR (88 downto 0);
    signal y_V_3_fu_443_p3 : STD_LOGIC_VECTOR (88 downto 0);
    signal z_V_1_fu_495_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_V_fu_508_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_V_reg_906 : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln839_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_28_fu_514_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_28_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_V_4_fu_522_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_V_4_reg_916 : STD_LOGIC_VECTOR (85 downto 0);
    signal sub_ln848_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln848_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln858_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln858_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln858_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln858_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln847_fu_721_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln847_reg_938 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln688_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_i_reg_948 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_phi_mux_retval_0_phi_fu_206_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal retval_0_reg_202 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal k_cast_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_V_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_242_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1300_fu_252_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_48_fu_228_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_fu_256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln832_fu_262_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_25_fu_284_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal x_V_fu_288_p4 : STD_LOGIC_VECTOR (85 downto 0);
    signal p_Result_26_fu_302_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal y_V_fu_306_p4 : STD_LOGIC_VECTOR (85 downto 0);
    signal ret_6_fu_278_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal isNeg_fu_320_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1321_fu_328_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_334_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_cast_cast_cast_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln710_1_fu_316_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal sh_prom_i_i_i_cast_cast_cast_cast_fu_346_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_fu_350_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_49_fu_356_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln1287_fu_395_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_54_fu_399_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal sub_ln130_fu_405_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln130_fu_411_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_55_fu_425_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln130_1_fu_437_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal sub_ln130_1_fu_431_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal tmp_43_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln369_fu_469_p1 : STD_LOGIC_VECTOR (84 downto 0);
    signal trunc_ln_fu_451_p4 : STD_LOGIC_VECTOR (84 downto 0);
    signal add_ln369_fu_473_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal zext_ln193_fu_479_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal sub_ln130_2_fu_483_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal add_ln130_2_fu_489_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal t_fu_529_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_539_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1026_fu_557_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_29_fu_561_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_569_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1028_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal NZeros_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal hitNonZero_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NZeros_4_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal NZeros_6_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_607_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln851_fu_623_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln851_fu_627_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln851_fu_633_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal zext_ln853_fu_643_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal lshr_ln851_fu_637_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal shl_ln853_fu_647_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal or_ln853_2_fu_653_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal and_ln853_fu_659_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_46_fu_671_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_fu_685_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln853_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln850_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln853_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln850_fu_705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln853_1_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln859_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln859_fu_730_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal add_ln858_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln858_fu_744_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal lshr_ln858_fu_748_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal shl_ln859_fu_734_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal trunc_ln859_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln859_2_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_761_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln865_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_771_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_7_fu_777_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_791_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln869_fu_807_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln847_fu_799_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln869_fu_812_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln866_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_818_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_31_fu_825_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component inversekinematics_ddiv_64ns_64ns_64_22_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component inversekinematics_generic_asin_double_s_cordic_apfixed_circ_table_arctan_128_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;



begin
    cordic_ctab_table_128_V_U : component inversekinematics_generic_asin_double_s_cordic_apfixed_circ_table_arctan_128_V
    generic map (
        DataWidth => 126,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_ctab_table_128_V_address0,
        ce0 => cordic_ctab_table_128_V_ce0,
        q0 => cordic_ctab_table_128_V_q0);

    ddiv_64ns_64ns_64_22_no_dsp_1_U46 : component inversekinematics_ddiv_64ns_64ns_64_22_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_in,
        din1 => x_in,
        ce => ap_const_logic_1,
        dout => grp_fu_218_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln824_fu_272_p2 = ap_const_lv1_0) and (icmp_ln832_fu_266_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln824_fu_272_p2 = ap_const_lv1_0) and (icmp_ln832_fu_266_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_return_preg <= ap_phi_mux_retval_0_phi_fu_206_p8;
                end if; 
            end if;
        end if;
    end process;


    k_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln167_fu_376_p2 = ap_const_lv1_0))) then 
                k_reg_161 <= add_ln167_fu_370_p2;
            elsif (((icmp_ln824_fu_272_p2 = ap_const_lv1_0) and (icmp_ln832_fu_266_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_161 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    p_Val2_21_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln167_fu_376_p2 = ap_const_lv1_0))) then 
                p_Val2_21_reg_172 <= y_V_3_fu_443_p3;
            elsif (((icmp_ln824_fu_272_p2 = ap_const_lv1_0) and (icmp_ln832_fu_266_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_21_reg_172 <= r_V_53_fu_362_p3;
            end if; 
        end if;
    end process;

    retval_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln824_fu_272_p2 = ap_const_lv1_1) and (icmp_ln832_fu_266_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln839_fu_502_p2 = ap_const_lv1_1)))) then 
                retval_0_reg_202 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                retval_0_reg_202 <= bitcast_ln688_fu_837_p1;
            elsif (((icmp_ln832_reg_851 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                retval_0_reg_202 <= div_i_reg_948;
            end if; 
        end if;
    end process;

    x_V_1_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln167_fu_376_p2 = ap_const_lv1_0))) then 
                x_V_1_reg_181 <= x_V_2_fu_417_p3;
            elsif (((icmp_ln824_fu_272_p2 = ap_const_lv1_0) and (icmp_ln832_fu_266_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_V_1_reg_181 <= zext_ln710_fu_298_p1;
            end if; 
        end if;
    end process;

    z_V_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln167_reg_874 = ap_const_lv1_0))) then 
                z_V_reg_190 <= z_V_1_fu_495_p3;
            elsif (((icmp_ln824_fu_272_p2 = ap_const_lv1_0) and (icmp_ln832_fu_266_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                z_V_reg_190 <= ap_const_lv86_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                div_i_reg_948 <= grp_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln167_reg_874 <= icmp_ln167_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln832_reg_851 <= icmp_ln832_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln858_reg_928 <= icmp_ln858_fu_693_p2;
                p_Result_28_reg_911 <= z_V_reg_190(85 downto 85);
                select_ln858_reg_933 <= select_ln858_fu_713_p3;
                sub_ln848_reg_922 <= sub_ln848_fu_595_p2;
                tmp_V_4_reg_916 <= tmp_V_4_fu_522_p3;
                trunc_ln847_reg_938 <= trunc_ln847_fu_721_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln167_fu_376_p2 = ap_const_lv1_0))) then
                p_Result_27_reg_878 <= p_Val2_21_reg_172(88 downto 88);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln839_fu_502_p2 = ap_const_lv1_0))) then
                tmp_V_reg_906 <= tmp_V_fu_508_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln832_fu_266_p2, icmp_ln824_fu_272_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state4, icmp_ln839_fu_502_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln824_fu_272_p2 = ap_const_lv1_0) and (icmp_ln832_fu_266_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln824_fu_272_p2 = ap_const_lv1_1) and (icmp_ln832_fu_266_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif (((icmp_ln832_fu_266_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln839_fu_502_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    NZeros_4_fu_581_p2 <= std_logic_vector(unsigned(trunc_ln1028_fu_577_p1) + unsigned(NZeros_fu_547_p1));
    NZeros_6_fu_587_p3 <= 
        NZeros_4_fu_581_p2 when (hitNonZero_fu_551_p2(0) = '1') else 
        NZeros_fu_547_p1;
    NZeros_fu_547_p1 <= tmp_fu_539_p3(32 - 1 downto 0);
    add_ln130_1_fu_437_p2 <= std_logic_vector(unsigned(r_V_55_fu_425_p2) + unsigned(p_Val2_21_reg_172));
    add_ln130_2_fu_489_p2 <= std_logic_vector(unsigned(zext_ln193_fu_479_p1) + unsigned(z_V_reg_190));
    add_ln130_fu_411_p2 <= std_logic_vector(unsigned(r_V_54_fu_399_p2) + unsigned(x_V_1_reg_181));
    add_ln167_fu_370_p2 <= std_logic_vector(unsigned(k_reg_161) + unsigned(ap_const_lv7_1));
    add_ln369_fu_473_p2 <= std_logic_vector(unsigned(zext_ln369_fu_469_p1) + unsigned(trunc_ln_fu_451_p4));
    add_ln858_fu_739_p2 <= std_logic_vector(unsigned(sub_ln848_reg_922) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln869_fu_812_p2 <= std_logic_vector(unsigned(sub_ln869_fu_807_p2) + unsigned(select_ln847_fu_799_p3));
    and_ln853_1_fu_699_p2 <= (xor_ln853_fu_679_p2 and p_Result_30_fu_685_p3);
    and_ln853_fu_659_p2 <= (tmp_V_4_fu_522_p3 and or_ln853_2_fu_653_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln167_fu_376_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln167_fu_376_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_retval_0_phi_fu_206_p8_assign_proc : process(icmp_ln832_reg_851, div_i_reg_948, retval_0_reg_202, ap_CS_fsm_state28)
    begin
        if (((icmp_ln832_reg_851 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_phi_mux_retval_0_phi_fu_206_p8 <= div_i_reg_948;
        else 
            ap_phi_mux_retval_0_phi_fu_206_p8 <= retval_0_reg_202;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_retval_0_phi_fu_206_p8, ap_CS_fsm_state28, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_return <= ap_phi_mux_retval_0_phi_fu_206_p8;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln688_fu_837_p1 <= p_Result_31_fu_825_p5;
    cordic_ctab_table_128_V_address0 <= k_cast_fu_382_p1(7 - 1 downto 0);

    cordic_ctab_table_128_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cordic_ctab_table_128_V_ce0 <= ap_const_logic_1;
        else 
            cordic_ctab_table_128_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_1_fu_238_p1 <= y_in;
    data_V_fu_224_p1 <= x_in;
    hitNonZero_fu_551_p2 <= "1" when (t_fu_529_p4 = ap_const_lv64_0) else "0";
    icmp_ln167_fu_376_p2 <= "1" when (k_reg_161 = ap_const_lv7_58) else "0";
    icmp_ln824_fu_272_p2 <= "1" when (tmp_49_fu_242_p4 = ap_const_lv11_0) else "0";
    icmp_ln832_fu_266_p2 <= "1" when (unsigned(ret_fu_256_p2) < unsigned(zext_ln832_fu_262_p1)) else "0";
    icmp_ln839_fu_502_p2 <= "1" when (z_V_reg_190 = ap_const_lv86_0) else "0";
    icmp_ln850_fu_617_p2 <= "1" when (signed(tmp_45_fu_607_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln853_fu_665_p2 <= "0" when (and_ln853_fu_659_p2 = ap_const_lv86_0) else "1";
    icmp_ln858_fu_693_p2 <= "1" when (signed(lsb_index_fu_601_p2) > signed(ap_const_lv32_0)) else "0";
    isNeg_fu_320_p3 <= ret_6_fu_278_p2(11 downto 11);
    k_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_161),64));
    lsb_index_fu_601_p2 <= std_logic_vector(unsigned(sub_ln848_fu_595_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln851_fu_637_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv86_3FFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln851_fu_633_p1(31-1 downto 0)))));
    lshr_ln858_fu_748_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_4_reg_916),to_integer(unsigned('0' & zext_ln858_fu_744_p1(31-1 downto 0)))));
    m_5_fu_771_p2 <= std_logic_vector(unsigned(m_fu_761_p3) + unsigned(zext_ln865_fu_768_p1));
    m_7_fu_777_p4 <= m_5_fu_771_p2(63 downto 1);
    m_fu_761_p3 <= 
        trunc_ln859_fu_753_p1 when (icmp_ln858_reg_928(0) = '1') else 
        trunc_ln859_2_fu_757_p1;
    or_ln853_2_fu_653_p2 <= (shl_ln853_fu_647_p2 or lshr_ln851_fu_637_p2);
    p_Result_25_fu_284_p1 <= data_V_fu_224_p1(52 - 1 downto 0);
    p_Result_26_fu_302_p1 <= data_V_1_fu_238_p1(52 - 1 downto 0);
    p_Result_27_fu_387_p3 <= p_Val2_21_reg_172(88 downto 88);
    p_Result_28_fu_514_p3 <= z_V_reg_190(85 downto 85);
    p_Result_29_fu_561_p3 <= (trunc_ln1026_fu_557_p1 & ap_const_lv42_3FFFFFFFFFF);
    p_Result_30_fu_685_p3 <= tmp_V_4_fu_522_p3(to_integer(unsigned(lsb_index_fu_601_p2)) downto to_integer(unsigned(lsb_index_fu_601_p2))) when (to_integer(unsigned(lsb_index_fu_601_p2))>= 0 and to_integer(unsigned(lsb_index_fu_601_p2))<=85) else "-";
    p_Result_31_fu_825_p5 <= (tmp_5_fu_818_p3 & zext_ln866_fu_787_p1(51 downto 0));
    p_Result_s_fu_791_p3 <= m_5_fu_771_p2(54 downto 54);
    r_V_49_fu_356_p2 <= std_logic_vector(shift_right(unsigned(zext_ln710_1_fu_316_p1),to_integer(unsigned('0' & sh_prom_i_i_i_cast_cast_cast_cast_fu_346_p1(31-1 downto 0)))));
    r_V_53_fu_362_p3 <= 
        r_V_fu_350_p2 when (isNeg_fu_320_p3(0) = '1') else 
        r_V_49_fu_356_p2;
    r_V_54_fu_399_p2 <= std_logic_vector(shift_right(signed(p_Val2_21_reg_172),to_integer(unsigned('0' & zext_ln1287_fu_395_p1(31-1 downto 0)))));
    r_V_55_fu_425_p2 <= std_logic_vector(shift_right(signed(x_V_1_reg_181),to_integer(unsigned('0' & zext_ln1287_fu_395_p1(31-1 downto 0)))));
    r_V_fu_350_p2 <= std_logic_vector(shift_left(unsigned(zext_ln710_1_fu_316_p1),to_integer(unsigned('0' & sh_prom_i_i_i_cast_cast_cast_cast_fu_346_p1(31-1 downto 0)))));
    ret_6_fu_278_p2 <= std_logic_vector(unsigned(zext_ln832_fu_262_p1) - unsigned(zext_ln1300_fu_252_p1));
    ret_fu_256_p2 <= std_logic_vector(unsigned(zext_ln1300_fu_252_p1) + unsigned(ap_const_lv12_1B));
    select_ln847_fu_799_p3 <= 
        ap_const_lv11_3FF when (p_Result_s_fu_791_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln850_fu_705_p3 <= 
        icmp_ln853_fu_665_p2 when (icmp_ln850_fu_617_p2(0) = '1') else 
        p_Result_30_fu_685_p3;
    select_ln858_fu_713_p3 <= 
        select_ln850_fu_705_p3 when (icmp_ln858_fu_693_p2(0) = '1') else 
        and_ln853_1_fu_699_p2;
    sh_prom_i_i_i_cast_cast_cast_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_cast_cast_cast_fu_342_p1),89));
        sh_prom_i_i_i_cast_cast_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_334_p3),32));

    shl_ln853_fu_647_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv86_1),to_integer(unsigned('0' & zext_ln853_fu_643_p1(31-1 downto 0)))));
    shl_ln859_fu_734_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_4_reg_916),to_integer(unsigned('0' & zext_ln859_fu_730_p1(31-1 downto 0)))));
    sub_ln130_1_fu_431_p2 <= std_logic_vector(unsigned(p_Val2_21_reg_172) - unsigned(r_V_55_fu_425_p2));
    sub_ln130_2_fu_483_p2 <= std_logic_vector(unsigned(z_V_reg_190) - unsigned(zext_ln193_fu_479_p1));
    sub_ln130_fu_405_p2 <= std_logic_vector(unsigned(x_V_1_reg_181) - unsigned(r_V_54_fu_399_p2));
    sub_ln1321_fu_328_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(ret_6_fu_278_p2));
    sub_ln848_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv32_56) - unsigned(NZeros_6_fu_587_p3));
    sub_ln851_fu_627_p2 <= std_logic_vector(unsigned(ap_const_lv7_C) - unsigned(trunc_ln851_fu_623_p1));
    sub_ln859_fu_725_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln848_reg_922));
    sub_ln869_fu_807_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) - unsigned(trunc_ln847_reg_938));
    t_fu_529_p4 <= tmp_V_4_fu_522_p3(85 downto 22);
    tmp_43_fu_461_p3 <= cordic_ctab_table_128_V_q0(40 downto 40);
    tmp_45_fu_607_p4 <= lsb_index_fu_601_p2(31 downto 1);
    tmp_46_fu_671_p3 <= lsb_index_fu_601_p2(31 downto 31);
    tmp_48_fu_228_p4 <= data_V_fu_224_p1(62 downto 52);
    tmp_49_fu_242_p4 <= data_V_1_fu_238_p1(62 downto 52);
    tmp_5_fu_818_p3 <= (p_Result_28_reg_911 & add_ln869_fu_812_p2);
    tmp_V_4_fu_522_p3 <= 
        tmp_V_reg_906 when (p_Result_28_fu_514_p3(0) = '1') else 
        z_V_reg_190;
    tmp_V_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv86_0) - unsigned(z_V_reg_190));
    
    tmp_fu_539_p3_proc : process(t_fu_529_p4)
    begin
        tmp_fu_539_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if t_fu_529_p4(i) = '1' then
                tmp_fu_539_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_s_fu_569_p3_proc : process(p_Result_29_fu_561_p3)
    begin
        tmp_s_fu_569_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_29_fu_561_p3(i) = '1' then
                tmp_s_fu_569_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln1026_fu_557_p1 <= tmp_V_4_fu_522_p3(22 - 1 downto 0);
    trunc_ln1028_fu_577_p1 <= tmp_s_fu_569_p3(32 - 1 downto 0);
    trunc_ln847_fu_721_p1 <= NZeros_6_fu_587_p3(11 - 1 downto 0);
    trunc_ln851_fu_623_p1 <= sub_ln848_fu_595_p2(7 - 1 downto 0);
    trunc_ln859_2_fu_757_p1 <= shl_ln859_fu_734_p2(64 - 1 downto 0);
    trunc_ln859_fu_753_p1 <= lshr_ln858_fu_748_p2(64 - 1 downto 0);
    trunc_ln_fu_451_p4 <= cordic_ctab_table_128_V_q0(125 downto 41);
    ush_fu_334_p3 <= 
        sub_ln1321_fu_328_p2 when (isNeg_fu_320_p3(0) = '1') else 
        ret_6_fu_278_p2;
    x_V_2_fu_417_p3 <= 
        sub_ln130_fu_405_p2 when (p_Result_27_fu_387_p3(0) = '1') else 
        add_ln130_fu_411_p2;
    x_V_fu_288_p4 <= ((ap_const_lv1_1 & p_Result_25_fu_284_p1) & ap_const_lv33_0);
    xor_ln853_fu_679_p2 <= (tmp_46_fu_671_p3 xor ap_const_lv1_1);
    y_V_3_fu_443_p3 <= 
        add_ln130_1_fu_437_p2 when (p_Result_27_fu_387_p3(0) = '1') else 
        sub_ln130_1_fu_431_p2;
    y_V_fu_306_p4 <= ((ap_const_lv1_1 & p_Result_26_fu_302_p1) & ap_const_lv33_0);
    z_V_1_fu_495_p3 <= 
        sub_ln130_2_fu_483_p2 when (p_Result_27_reg_878(0) = '1') else 
        add_ln130_2_fu_489_p2;
    zext_ln1287_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_161),89));
    zext_ln1300_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_242_p4),12));
    zext_ln193_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln369_fu_473_p2),86));
    zext_ln369_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_461_p3),85));
    zext_ln710_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_306_p4),89));
    zext_ln710_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_fu_288_p4),89));
    zext_ln832_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_228_p4),12));
    zext_ln851_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln851_fu_627_p2),86));
    zext_ln853_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_fu_601_p2),86));
    zext_ln858_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln858_fu_739_p2),86));
    zext_ln859_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln859_fu_725_p2),86));
    zext_ln865_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln858_reg_933),64));
    zext_ln866_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_7_fu_777_p4),64));
end behav;
